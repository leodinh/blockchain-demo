{"version":3,"sources":["assets/icon/sprite.svg","shared/block_miner.js","assets/icon/mining.svg","assets/icon/loading.svg","store/actions/blockChain.js","store/actions/actionTypes.js","shared/utility.js","component/Block/Block.js","component/Reset/Reset.js","component/AddBlock/AddBlock.js","App.js","serviceWorker.js","store/reducers/blockChain.js","index.js"],"names":["module","exports","Worker","initBlock","data","difficulty","dispatch","addBlock","prevHash","index","type","miner","BlockMiner","postMessage","JSON","stringify","timestamp","Date","toLocaleString","onmessage","event","addBlockSuccess","terminate","block","modifyData","revalidDate","revalidDateStart","previousHash","revalidDateSuccess","changeDifficulty","level","updateObject","oldObject","updatedValues","Utils","this","blockToHash","stringifiedBl","hexifiedBl","toHex","ethers","utils","keccak256","clonedBlock","parse","nonce","hash","hashBlock","substring","getLeadingZeros","blockWithoutHash","result","i","concat","input","length","charCodeAt","toString","Block","props","React","useState","mounted","setMounted","useDispatch","miningBlocks","useSelector","state","revalidatingBlock","isProcessingBlock","includes","isProcessingPreviousBlock","Math","min","apply","isValidBlock","verifyBlock","useEffect","Fragment","CSSTransition","in","timeout","mountOnEnter","unmountOnExit","classNames","className","xlinkHref","Icon","value","onChange","e","actions","target","onClick","reValidDateBlock","disabled","Reset","diffValue","setDiffValue","connect","blockChain","isMining","setData","placeholder","src","MiningIcon","alt","App","onInitBlock","useCallback","content","Spinner","map","key","Boolean","window","location","hostname","match","initialState","addBlockStart","action","modifiedBlock","newHashValue","revalidateBlockStart","revalidateBlockSuccess","newBlockChain","splice","newRevalidatingBlock","filter","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2bb554ce.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sprite.4859caa7.svg\";","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"610538a06ea2e2844c10.worker.js\");\n};","module.exports = __webpack_public_path__ + \"static/media/mining.9064981b.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.7627687e.svg\";","/*eslint import/no-webpack-loader-syntax: off*/\nimport * as actionTypes from \"./actionTypes\";\n\n// eslint-disable-next-line\nimport BlockMiner from \"worker-loader!../../shared/block_miner.js\";\n//const miner = new BlockMiner();\nexport const initBlock = (data, difficulty) => {\n  return dispatch => {\n    dispatch(addBlock(data, false, false, difficulty));\n  };\n};\nexport const addBlockStart = () => {\n  return {\n    type: actionTypes.ADD_BLOCK_START\n  };\n};\nexport const addBlock = (data, prevHash, index, difficulty) => {\n  return dispatch => {\n    dispatch(addBlockStart());\n    let miner = new BlockMiner();\n    miner.postMessage(\n      JSON.stringify({\n        timestamp: new Date().toLocaleString(),\n        prevHash: prevHash || 0,\n        data: data,\n        index: index || 0,\n        difficulty: difficulty\n      })\n    );\n    miner.onmessage = event => {\n      dispatch(addBlockSuccess(event.data));\n      miner.terminate();\n    };\n  };\n};\nexport const addBlockSuccess = block => {\n  return {\n    type: actionTypes.ADD_BLOCK_SUCCESS,\n    block: block\n  };\n};\nexport const modifyData = (data, index) => {\n  return {\n    type: actionTypes.MODIFY_BLOCK,\n    data: data,\n    index: index\n  };\n};\nexport const revalidDate = (block, difficulty) => {\n  return dispatch => {\n    let miner = new BlockMiner();\n    dispatch(revalidDateStart(block.index));\n    miner.postMessage(\n      JSON.stringify({\n        timestamp: block.timestamp,\n        prevHash: block.previousHash,\n        data: block.data,\n        index: block.index,\n        difficulty: difficulty\n      })\n    );\n    miner.onmessage = function(event) {\n      dispatch(revalidDateSuccess(event.data));\n      miner.terminate();\n    };\n  };\n};\nexport const revalidDateStart = index => {\n  return {\n    type: actionTypes.REVALIDATE_BLOCK_START,\n    index: index\n  };\n};\nexport const revalidDateSuccess = block => {\n  return {\n    type: actionTypes.REVALIDATE_BLOCK_SUCCESS,\n    block: block\n  };\n};\nexport const changeDifficulty = level => {\n  return {\n    type: actionTypes.CHANGE_DIFFICULTY,\n    level: level\n  };\n};\n","export const ADD_BLOCK_START = \"ADD_BLOCK_START\";\nexport const ADD_BLOCK_SUCCESS = \"ADD_BLOCK_SUCCESS\";\nexport const MODIFY_BLOCK = \"MODIFY_BLOCK\";\nexport const REVALIDATE_BLOCK_START = \"REVALIDATE_BLOCK_START\";\nexport const REVALIDATE_BLOCK_SUCCESS = \"REVALIDATE_BLOCK_SUCCESS\";\nexport const CHANGE_DIFFICULTY = \"CHANGE_DIFFICULTY\";\n","import { ethers } from \"ethers\";\nexport const updateObject = (oldObject, updatedValues) => {\n  return {\n    ...oldObject,\n    ...updatedValues\n  };\n};\nexport class Utils {\n  setDifficulty(difficulty) {\n    this.difficulty = difficulty;\n  }\n\n  hashBlock(blockToHash) {\n    let stringifiedBl = JSON.stringify(blockToHash);\n    let hexifiedBl = this.toHex(stringifiedBl);\n    return ethers.utils.keccak256(hexifiedBl);\n  }\n\n  calculateNonce(block) {\n    let clonedBlock = JSON.parse(JSON.stringify(block));\n    let nonce = 0;\n    clonedBlock[\"nonce\"] = nonce;\n    let hash = this.hashBlock(clonedBlock);\n\n    while (\n      !(hash.substring(2, this.difficulty + 2) === this.getLeadingZeros())\n    ) {\n      nonce++;\n      clonedBlock[\"nonce\"] = nonce;\n      hash = this.hashBlock(clonedBlock);\n    }\n    return nonce;\n  }\n\n  verifyBlock(block) {\n    var blockWithoutHash = {\n      timestamp: block.timestamp,\n      data: block.data,\n      previousHash: block.previousHash,\n      index: block.index,\n      nonce: block.nonce\n    };\n\n    var hash = this.hashBlock(blockWithoutHash);\n    return hash === block.hash;\n  }\n\n  getLeadingZeros() {\n    var result = \"\";\n    for (let i = 0; i < this.difficulty; i++) {\n      result = result.concat(\"0\");\n    }\n    return result;\n  }\n\n  toHex(input) {\n    var result = \"\";\n    for (var i = 0; i < input.length; i++) {\n      result += input.charCodeAt(i).toString(16);\n    }\n    return \"0x\" + result;\n  }\n}\n","import React from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"../../store/actions/index\";\nimport Icon from \"../../assets/icon/sprite.svg\";\nimport { Utils } from \"../../shared/utility\";\nimport \"./Block.scss\";\nimport CSSTransition from \"react-transition-group/CSSTransition\";\nfunction Block(props) {\n  const [mounted, setMounted] = React.useState(false);\n  const utils = new Utils();\n  const dispatch = useDispatch();\n  const miningBlocks = useSelector(state => {\n    return state.revalidatingBlock;\n  });\n  const isProcessingBlock = miningBlocks.includes(props.block.index);\n  const isProcessingPreviousBlock = Math.min.apply(Math, miningBlocks) < 0;\n  const difficulty = useSelector(state => {\n    return state.difficulty;\n  });\n  const modifyBlock = (event, index) => {\n    dispatch(actions.modifyData(event.target.value, index));\n  };\n  const reValidDateBlock = (block, difficulty) => {\n    dispatch(actions.revalidDate(block, difficulty));\n  };\n  const isValidBlock = block => {\n    return utils.verifyBlock(block);\n  };\n  React.useEffect(() => {\n    setMounted(true);\n  }, []);\n  return (\n    <React.Fragment>\n      <CSSTransition\n        in={!!props.block.index}\n        timeout={500}\n        mountOnEnter\n        unmountOnExit\n        classNames=\"faded\"\n      >\n        <svg className=\"narrow_down\">\n          <use xlinkHref={`${Icon}#icon-chevron-down`} />\n        </svg>\n      </CSSTransition>\n\n      <CSSTransition in={mounted} timeout={500} classNames=\"faded\">\n        <div className=\"block\">\n          <div className=\"title\">\n            <div className=\"title__label\">\n              <span>DATA</span>\n            </div>\n            <input\n              type=\"text\"\n              className=\"title__input\"\n              value={props.block.data}\n              onChange={e => modifyBlock(e, props.block.index)}\n            />\n          </div>\n          <div className=\"prehash\">\n            <p className=\"prehash__title\">Previous Hash</p>\n            <div\n              className={`prehash__value\n                ${\n                  isValidBlock(props.block)\n                    ? `prehash__value-right`\n                    : `prehash__value-wrong`\n                }\n              `}\n            >\n              {props.block.previousHash}\n            </div>\n          </div>\n          <div className=\"hash\">\n            <div className=\"hash__title\">Hash</div>\n\n            <div\n              className={`hash__value ${\n                isValidBlock(props.block)\n                  ? `hash__value-right`\n                  : `hash__value-wrong`\n              }`}\n            >\n              <span>{props.block.hash}</span>\n            </div>\n          </div>\n          <div className=\"detail\">\n            <div className=\"index\">\n              {props.block.index === 0\n                ? \"GENESIS BLOCK\"\n                : `BLOCK #${props.block.index}`}\n            </div>\n            <div className=\"timestamp\">{props.block.timestamp}</div>\n            {isValidBlock(props.block) ? (\n              <div className=\"nonce\">{props.block.nonce}</div>\n            ) : (\n              <button\n                className=\"nonce fix\"\n                onClick={() => reValidDateBlock(props.block, difficulty)}\n                disabled={isProcessingPreviousBlock || isProcessingBlock}\n              >\n                {isProcessingBlock ? (\n                  \"Mining...\"\n                ) : (\n                  <svg className=\"fix_icon\">\n                    <use xlinkHref={`${Icon}#icon-wrench`} />\n                  </svg>\n                )}\n              </button>\n            )}\n          </div>\n        </div>\n      </CSSTransition>\n    </React.Fragment>\n  );\n}\n\nexport default Block;\n","import React, { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport \"./Reset.scss\";\nimport * as actions from \"../../store/actions/index\";\nfunction Reset() {\n  const dispatch = useDispatch();\n  const changeDifficulty = level => {\n    if (difficulty !== diffValue) {\n      dispatch(actions.changeDifficulty(level));\n    }\n  };\n  const difficulty = useSelector(state => {\n    return state.difficulty;\n  });\n  const [diffValue, setDiffValue] = useState(difficulty);\n  const decreaseDiffValue = () => {\n    if (diffValue > 1) {\n      setDiffValue(diffValue - 1);\n    }\n  };\n  const increaseDiffValue = () => {\n    setDiffValue(diffValue + 1);\n  };\n  return (\n    <div className=\"reset\">\n      <div className=\"difficulty\">\n        Current Difficulty Level:\n        <span>{difficulty}</span>\n      </div>\n      <div className=\"configure__diff\">\n        <button className=\"configure__diff-incre\" onClick={increaseDiffValue}>\n          +\n        </button>\n        <span>{diffValue}</span>\n        <button className=\"configure__diff-decre\" onClick={decreaseDiffValue}>\n          -\n        </button>\n      </div>\n      <button\n        className=\"reset-btn btn\"\n        onClick={() => changeDifficulty(diffValue)}\n      >\n        Change Difficulty\n      </button>\n    </div>\n  );\n}\n\nexport default Reset;\n","import React from \"react\";\nimport \"./AddBlock.scss\";\nimport * as actions from \"../../store/actions/blockChain\";\nimport Icon from \"../../assets/icon/sprite.svg\";\nimport MiningIcon from \"../../assets/icon/mining.svg\";\nimport { connect } from \"react-redux\";\nfunction AddBlock(props) {\n  const [data, setData] = React.useState(\"\");\n  const onChangeData = e => {\n    setData(e.target.value);\n  };\n\n  return (\n    <div className=\"add__block\">\n      <div className=\"title\">\n        <div className=\"title__label\">\n          <span>DATA</span>\n        </div>\n        <input\n          type=\"text\"\n          className=\"title__input\"\n          placeholder=\"Add your data\"\n          onChange={event => onChangeData(event)}\n        />\n      </div>\n      {props.isMining === true ? (\n        <img src={MiningIcon} alt=\"mining\" className=\"mining\" />\n      ) : (\n        <button\n          className=\"add\"\n          onClick={() =>\n            props.addBlock(\n              data,\n              props.prevHash.hash,\n              props.index,\n              props.difficulty\n            )\n          }\n        >\n          <svg className=\"add-icon\">\n            <use xlinkHref={`${Icon}#icon-add`} />\n          </svg>\n          <span>Add New Block</span>\n        </button>\n      )}\n    </div>\n  );\n}\nconst mapStateToProps = state => {\n  return {\n    prevHash: state.blockChain[state.blockChain.length - 1],\n    index: state.blockChain.length,\n    difficulty: state.difficulty,\n    isMining: state.isMining\n  };\n};\nconst mapDispatchToProps = dispatch => {\n  return {\n    addBlock: (data, prevHash, index, difficulty) =>\n      dispatch(actions.addBlock(data, prevHash, index, difficulty))\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AddBlock);\n","import React, { useCallback } from \"react\";\nimport \"./App.scss\";\nimport Block from \"./component/Block/Block\";\nimport Reset from \"./component/Reset/Reset\";\nimport AddBlock from \"./component/AddBlock/AddBlock\";\nimport Spinner from \"./assets/icon/loading.svg\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport * as actions from \"./store/actions/index\";\nfunction App(props) {\n  const dispatch = useDispatch();\n  const blockChain = useSelector(state => {\n    return state.blockChain;\n  });\n  const difficulty = useSelector(state => {\n    return state.difficulty;\n  });\n  const isMining = useSelector(state => {\n    return state.isMining;\n  });\n  const onInitBlock = useCallback(\n    () => dispatch(actions.initBlock(\"Welcome to Blockchain Demo\", difficulty)),\n    [difficulty, dispatch]\n  );\n  React.useEffect(() => {\n    onInitBlock();\n  }, [onInitBlock]);\n  let content = \"\";\n  if (isMining === true && blockChain.length === 0) {\n    content = (\n      <div className=\"main-content\">\n        <img src={Spinner} alt=\"spinner\" className=\"spinner\" />\n        <p>Mining Genesis Block!!</p>\n      </div>\n    );\n  } else {\n    content = (\n      <React.Fragment>\n        <div className=\"main-content\">\n          <h1>Blockchain</h1>\n          <div className=\"blockchain\">\n            {blockChain.map((block, index) => {\n              return <Block block={block} key={index} />;\n            })}\n          </div>\n          <AddBlock />\n        </div>\n        <div className=\"right-side\">\n          <Reset />\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  return <div className=\"App\">{content}</div>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import * as actionTypes from \"../actions/actionTypes\";\nimport { updateObject, Utils } from \"../../shared/utility\";\nconst initialState = {\n  blockChain: [],\n  isMining: false,\n  difficulty: 4,\n  revalidatingBlock: []\n};\nconst addBlockStart = (state, action) => {\n  return updateObject(state, { isMining: true });\n};\nconst addBlockSuccess = (state, action) => {\n  return updateObject(state, {\n    blockChain: [...state.blockChain, action.block],\n    isMining: false\n  });\n};\nconst modifyData = (state, action) => {\n  let blockChain = [...state.blockChain];\n  let modifiedBlock = blockChain[action.index];\n  modifiedBlock[\"data\"] = action.data;\n  let utils = new Utils();\n  let newHashValue = utils.hashBlock(modifiedBlock);\n  blockChain[action.index][\"hash\"] = newHashValue;\n  for (let i = action.index + 1; i < blockChain.length; i++) {\n    blockChain[i].previousHash = blockChain[i - 1].hash;\n    blockChain[i].hash = utils.hashBlock(blockChain[i]);\n  }\n  return updateObject(state, {\n    blockChain: blockChain\n  });\n};\nconst revalidateBlockStart = (state, action) => {\n  return updateObject(state, {\n    revalidatingBlock: [...state.revalidatingBlock, action.index]\n  });\n};\nconst revalidateBlockSuccess = (state, action) => {\n  const newBlockChain = [...state.blockChain];\n  newBlockChain.splice(action.block.index, 1, action.block);\n\n  for (let i = action.block.index; i < newBlockChain.length; i++) {\n    if (i > 0) {\n      newBlockChain[i].previousHash = newBlockChain[i - 1].hash;\n    }\n  }\n  const newRevalidatingBlock = state.revalidatingBlock.filter(\n    index => index !== action.block.index\n  );\n\n  return updateObject(state, {\n    blockChain: newBlockChain,\n    revalidatingBlock: newRevalidatingBlock\n  });\n};\nconst changeDifficulty = (state, action) => {\n  return updateObject(state, {\n    difficulty: action.level,\n    blockChain: []\n  });\n};\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_BLOCK_START:\n      return addBlockStart(state, action);\n    case actionTypes.ADD_BLOCK_SUCCESS:\n      return addBlockSuccess(state, action);\n    case actionTypes.MODIFY_BLOCK:\n      return modifyData(state, action);\n    case actionTypes.REVALIDATE_BLOCK_START:\n      return revalidateBlockStart(state, action);\n    case actionTypes.REVALIDATE_BLOCK_SUCCESS:\n      return revalidateBlockSuccess(state, action);\n    case actionTypes.CHANGE_DIFFICULTY:\n      return changeDifficulty(state, action);\n    default:\n      return state;\n  }\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { createStore, applyMiddleware, compose } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport thunk from \"redux-thunk\";\nimport blockChainReducer from \"./store/reducers/blockChain\";\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(\n  blockChainReducer,\n  composeEnhancers(applyMiddleware(thunk))\n);\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}